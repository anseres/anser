package {{.LowerServiceName}}

import (
	context "golang.org/x/net/context"
	"google.golang.org/grpc"
)

// Client is a {{.ServiceName}} Client
type Client struct {
	ServerAddr string

	GRPCConn   *grpc.ClientConn
	GRPCClient {{.ServiceName}}Client
}

func NewClient(addr string) (*Client, error) {
    client := &Client{}
    client.ServerAddr = addr
    err := client.init()
    if err != nil {
        return nil, err
    }
    return client, nil
}

func (c *Client) init() error {
	if c.GRPCClient != nil {
		return nil
	}
	var err error
	if c.GRPCConn == nil {
		c.GRPCConn, err = grpc.Dial(c.ServerAddr, grpc.WithInsecure())
		if err != nil {
			return err
		}
	}
	c.GRPCClient = New{{.ServiceName}}Client(c.GRPCConn)
	return nil
}

// Close close {{.ServiceName}}.Client
func (c *Client) Close() error {
	if c.GRPCConn != nil {
		return c.GRPCConn.Close()
	}
	return nil
}

{{- $ServiceName := .ServiceName -}}

{{ range .Services }}

// {{.MethodName}} call {{$ServiceName}}.{{.MethodName}} with gRPC
func (c *Client) {{.MethodName}}(ctx context.Context, req *{{.InputTypeName}}) (*{{.OutputTypeName}}, error) {
	resp, err := c.GRPCClient.{{.MethodName}}(ctx, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
{{- end }}